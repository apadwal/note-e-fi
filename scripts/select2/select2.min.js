(function (e) { if (typeof e.fn.each2 == "undefined") { e.fn.extend({ each2: function (t) { var n = e([0]), r = -1, i = this.length; while (++r < i && (n.context = n[0] = this[r]) && t.call(n[0], r, n) !== false); return this } }) } })(jQuery); (function (e, t) { "use strict"; function l(e, t) { var n = 0, r = t.length, i; if (typeof e === "undefined") { return -1 } if (e.constructor === String) { for (; n < r; n = n + 1) if (e.localeCompare(t[n]) === 0) return n } else { for (; n < r; n = n + 1) { i = t[n]; if (i.constructor === String) { if (i.localeCompare(e) === 0) return n } else { if (i === e) return n } } } return -1 } function c(e, n) { if (e === n) return true; if (e === t || n === t) return false; if (e === null || n === null) return false; if (e.constructor === String) return e.localeCompare(n) === 0; if (n.constructor === String) return n.localeCompare(e) === 0; return false } function h(t, n) { var r, i, s; if (t === null || t.length < 1) return []; r = t.split(n); for (i = 0, s = r.length; i < s; i = i + 1) r[i] = e.trim(r[i]); return r } function p(e) { return e.outerWidth(false) - e.width() } function d(n) { var r = "keyup-change-value"; n.bind("keydown", function () { if (e.data(n, r) === t) { e.data(n, r, n.val()) } }); n.bind("keyup", function () { var i = e.data(n, r); if (i !== t && n.val() !== i) { e.removeData(n, r); n.trigger("keyup-change") } }) } function v(n) { n.bind("mousemove", function (n) { var r = a; if (r === t || r.x !== n.pageX || r.y !== n.pageY) { e(n.target).trigger("mousemove-filtered", n) } }) } function m(e, n, r) { r = r || t; var i; return function () { var t = arguments; window.clearTimeout(i); i = window.setTimeout(function () { n.apply(r, t) }, e) } } function g(e) { var t = false, n; return function () { if (t === false) { n = e(); t = true } return n } } function y(e, t) { var n = m(e, function (e) { t.trigger("scroll-debounced", e) }); t.bind("scroll", function (e) { if (l(e.target, t.get()) >= 0) n(e) }) } function b(e) { e.preventDefault(); e.stopPropagation() } function w(e) { e.preventDefault(); e.stopImmediatePropagation() } function E(t) { if (!u) { var n = t[0].currentStyle || window.getComputedStyle(t[0], null); u = e("<div></div>").css({ position: "absolute", left: "-10000px", top: "-10000px", display: "none", fontSize: n.fontSize, fontFamily: n.fontFamily, fontStyle: n.fontStyle, fontWeight: n.fontWeight, letterSpacing: n.letterSpacing, textTransform: n.textTransform, whiteSpace: "nowrap" }); e("body").append(u) } u.text(t.val()); return u.width() } function S(e, t, n) { var r = e.toUpperCase().indexOf(t.toUpperCase()), i = t.length; if (r < 0) { n.push(e); return } n.push(e.substring(0, r)); n.push("<span class='select2-match'>"); n.push(e.substring(r, r + i)); n.push("</span>"); n.push(e.substring(r + i, e.length)) } function x(t) { var n, r = 0, i = null, s = t.quietMillis || 100; return function (o) { window.clearTimeout(n); n = window.setTimeout(function () { r += 1; var n = r, s = t.data, u = t.transport || e.ajax, a = t.traditional || false, f = t.type || "GET"; s = s.call(this, o.term, o.page, o.context); if (null !== i) { i.abort() } i = u.call(null, { url: t.url, dataType: t.dataType, data: s, type: f, traditional: a, success: function (e) { if (n < r) { return } var i = t.results(e, o.page); o.callback(i) } }) }, s) } } function T(t) { var n = t, r, i = function (e) { return "" + e.text }; if (!e.isArray(n)) { i = n.text; if (!e.isFunction(i)) { r = n.text; i = function (e) { return e[r] } } n = n.results } return function (t) { var r = t.term, s = { results: [] }, o; if (r === "") { t.callback({ results: n }); return } o = function (n, s) { var u, a; n = n[0]; if (n.children) { u = {}; for (a in n) { if (n.hasOwnProperty(a)) u[a] = n[a] } u.children = []; e(n.children).each2(function (e, t) { o(t, u.children) }); if (u.children.length || t.matcher(r, i(u))) { s.push(u) } } else { if (t.matcher(r, i(n))) { s.push(n) } } }; e(n).each2(function (e, t) { o(t, s.results) }); t.callback(s) } } function N(n) { if (e.isFunction(n)) { return n } return function (r) { var i = r.term, s = { results: [] }; e(n).each(function () { var e = this.text !== t, n = e ? this.text : this; if (i === "" || r.matcher(i, n)) { s.results.push(e ? this : { id: this, text: this }) } }); r.callback(s) } } function C(t, n) { if (e.isFunction(t)) return true; if (!t) return false; throw new Error("formatterName must be a function or a falsy value") } function k(t) { return e.isFunction(t) ? t() : t } function L(t) { var n = 0; e.each(t, function (e, t) { if (t.children) { n += L(t.children) } else { n++ } }); return n } function A(e, n, r, i) { var s = e, o = false, u, a, f, l, h; if (!i.createSearchChoice || !i.tokenSeparators || i.tokenSeparators.length < 1) return t; while (true) { a = -1; for (f = 0, l = i.tokenSeparators.length; f < l; f++) { h = i.tokenSeparators[f]; a = e.indexOf(h); if (a >= 0) break } if (a < 0) break; u = e.substring(0, a); e = e.substring(a + h.length); if (u.length > 0) { u = i.createSearchChoice(u, n); if (u !== t && u !== null && i.id(u) !== t && i.id(u) !== null) { o = false; for (f = 0, l = n.length; f < l; f++) { if (c(i.id(u), i.id(n[f]))) { o = true; break } } if (!o) r(u) } } } if (s.localeCompare(e) != 0) return e } function O(t, n) { var r = function () { }; r.prototype = new t; r.prototype.constructor = r; r.prototype.parent = t.prototype; r.prototype = e.extend(r.prototype, n); return r } if (window.Select2 !== t) { return } var n, r, i, s, o, u, a, f; n = { TAB: 9, ENTER: 13, ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, SHIFT: 16, CTRL: 17, ALT: 18, PAGE_UP: 33, PAGE_DOWN: 34, HOME: 36, END: 35, BACKSPACE: 8, DELETE: 46, isArrow: function (e) { e = e.which ? e.which : e; switch (e) { case n.LEFT: case n.RIGHT: case n.UP: case n.DOWN: return true } return false }, isControl: function (e) { var t = e.which; switch (t) { case n.SHIFT: case n.CTRL: case n.ALT: return true } if (e.metaKey) return true; return false }, isFunctionKey: function (e) { e = e.which ? e.which : e; return e >= 112 && e <= 123 } }; f = e(document); o = function () { var e = 1; return function () { return e++ } } (); f.bind("mousemove", function (e) { a = { x: e.pageX, y: e.pageY} }); f.ready(function () { f.bind("mousedown touchend", function (n) { var r = e(n.target).closest("div.select2-container").get(0), i; var s = null; if (r) { f.find("div.select2-container-active").each(function () { if (this !== r) e(this).data("select2").blur() }); s = e(r).data("select2").dropdown.get(0) } r = s || e(n.target).closest("div.select2-drop").get(0); f.find("div.select2-drop-active").each(function () { if (this !== r) e(this).data("select2").blur() }); r = e(n.target); i = r.attr("for"); if ("LABEL" === n.target.tagName && i && i.length > 0) { i = i.replace(/([\[\].])/g, "\\$1"); r = e("#" + i); r = r.data("select2"); if (r !== t) { r.focus(); n.preventDefault() } } }) }); r = O(Object, { bind: function (e) { var t = this; return function () { e.apply(t, arguments) } }, init: function (n) { var r, i, s = ".select2-results"; this.opts = n = this.prepareOpts(n); this.id = n.id; if (n.element.data("select2") !== t && n.element.data("select2") !== null) { this.destroy() } this.enabled = true; this.container = this.createContainer(); this.containerId = "s2id_" + (n.element.attr("id") || "autogen" + o()); this.containerSelector = "#" + this.containerId.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1"); this.container.attr("id", this.containerId); this.body = g(function () { return n.element.closest("body") }); if (n.element.attr("class") !== t) { this.container.addClass(n.element.attr("class").replace(/validate\[[\S ]+] ?/, "")) } this.container.css(k(n.containerCss)); this.container.addClass(k(n.containerCssClass)); this.opts.element.data("select2", this).hide().before(this.container); this.container.data("select2", this); this.dropdown = this.container.find(".select2-drop"); this.dropdown.addClass(k(n.dropdownCssClass)); this.dropdown.data("select2", this); this.results = r = this.container.find(s); this.search = i = this.container.find("input.select2-input"); i.attr("tabIndex", this.opts.element.attr("tabIndex")); this.resultsPage = 0; this.context = null; this.initContainer(); this.initContainerWidth(); v(this.results); this.dropdown.delegate(s, "mousemove-filtered", this.bind(this.highlightUnderEvent)); y(80, this.results); this.dropdown.delegate(s, "scroll-debounced", this.bind(this.loadMoreIfNeeded)); if (e.fn.mousewheel) { r.mousewheel(function (e, t, n, i) { var s = r.scrollTop(), o; if (i > 0 && s - i <= 0) { r.scrollTop(0); b(e) } else if (i < 0 && r.get(0).scrollHeight - r.scrollTop() + i <= r.height()) { r.scrollTop(r.get(0).scrollHeight - r.height()); b(e) } }) } d(i); i.bind("keyup-change", this.bind(this.updateResults)); i.bind("focus", function () { i.addClass("select2-focused"); if (i.val() === " ") i.val("") }); i.bind("blur", function () { i.removeClass("select2-focused") }); this.dropdown.delegate(s, "mouseup", this.bind(function (t) { if (e(t.target).closest(".select2-result-selectable:not(.select2-disabled)").length > 0) { this.highlightUnderEvent(t); this.selectHighlighted(t) } else { this.focusSearch() } b(t) })); this.dropdown.bind("click mouseup mousedown", function (e) { e.stopPropagation() }); if (e.isFunction(this.opts.initSelection)) { this.initSelection(); this.monitorSource() } if (n.element.is(":disabled") || n.element.is("[readonly='readonly']")) this.disable() }, destroy: function () { var e = this.opts.element.data("select2"); if (e !== t) { e.container.remove(); e.dropdown.remove(); e.opts.element.removeData("select2").unbind(".select2").show() } }, prepareOpts: function (n) { var r, i, s, o; r = n.element; if (r.get(0).tagName.toLowerCase() === "select") { this.select = i = n.element } if (i) { e.each(["id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags"], function () { if (this in n) { throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.") } }) } n = e.extend({}, { populateResults: function (r, i, s) { var o, u, a, f, l = this.opts.id, c = this; o = function (r, i, u) { var a, f, h, p, d, v, m, g, y; for (a = 0, f = r.length; a < f; a = a + 1) { h = r[a]; p = l(h) !== t; d = h.children && h.children.length > 0; v = e("<li></li>"); v.addClass("select2-results-dept-" + u); v.addClass("select2-result"); v.addClass(p ? "select2-result-selectable" : "select2-result-unselectable"); if (d) { v.addClass("select2-result-with-children") } v.addClass(c.opts.formatResultCssClass(h)); m = e("<div></div>"); m.addClass("select2-result-label"); y = n.formatResult(h, m, s); if (y !== t) { m.html(c.opts.escapeMarkup(y)) } v.append(m); if (d) { g = e("<ul></ul>"); g.addClass("select2-result-sub"); o(h.children, g, u + 1); v.append(g) } v.data("select2-data", h); i.append(v) } }; o(i, r, 0) } }, e.fn.select2.defaults, n); if (typeof n.id !== "function") { s = n.id; n.id = function (e) { return e[s] } } if (i) { n.query = this.bind(function (n) { var i = { results: [], more: false }, s = n.term, o, u, a; a = function (e, t) { var r; if (e.is("option")) { if (n.matcher(s, e.text(), e)) { t.push({ id: e.attr("value"), text: e.text(), element: e.get(), css: e.attr("class") }) } } else if (e.is("optgroup")) { r = { text: e.attr("label"), children: [], element: e.get(), css: e.attr("class") }; e.children().each2(function (e, t) { a(t, r.children) }); if (r.children.length > 0) { t.push(r) } } }; o = r.children(); if (this.getPlaceholder() !== t && o.length > 0) { u = o[0]; if (e(u).text() === "") { o = o.not(u) } } o.each2(function (e, t) { a(t, i.results) }); n.callback(i) }); n.id = function (e) { return e.id }; n.formatResultCssClass = function (e) { return e.css } } else { if (!("query" in n)) { if ("ajax" in n) { o = n.element.data("ajax-url"); if (o && o.length > 0) { n.ajax.url = o } n.query = x(n.ajax) } else if ("data" in n) { n.query = T(n.data) } else if ("tags" in n) { n.query = N(n.tags); if (n.createSearchChoice === t) { n.createSearchChoice = function (e) { return { id: e, text: e} } } n.initSelection = function (t, r) { var i = []; e(h(t.val(), n.separator)).each(function () { var t = this, r = this, s = n.tags; if (e.isFunction(s)) s = s(); e(s).each(function () { if (c(this.id, t)) { r = this.text; return false } }); i.push({ id: t, text: r }) }); r(i) } } } } if (typeof n.query !== "function") { throw "query function not defined for Select2 " + n.element.attr("id") } return n }, monitorSource: function () { this.opts.element.bind("change.select2", this.bind(function (e) { if (this.opts.element.data("select2-change-triggered") !== true) { this.initSelection() } })) }, triggerChange: function (t) { t = t || {}; t = e.extend({}, t, { type: "change", val: this.val() }); this.opts.element.data("select2-change-triggered", true); this.opts.element.trigger(t); this.opts.element.data("select2-change-triggered", false); this.opts.element.click(); if (this.opts.blurOnChange) this.opts.element.blur() }, enable: function () { if (this.enabled) return; this.enabled = true; this.container.removeClass("select2-container-disabled"); this.opts.element.removeAttr("disabled") }, disable: function () { if (!this.enabled) return; this.close(); this.enabled = false; this.container.addClass("select2-container-disabled"); this.opts.element.attr("disabled", "disabled") }, opened: function () { return this.container.hasClass("select2-dropdown-open") }, positionDropdown: function () { var t = this.container.offset(), n = this.container.outerHeight(false), r = this.container.outerWidth(false), i = this.dropdown.outerHeight(false), s = e(window).scrollLeft() + document.documentElement.clientWidth, o = e(window).scrollTop() + document.documentElement.clientHeight, u = t.top + n, a = t.left, f = u + i <= o, l = t.top - i >= this.body().scrollTop(), c = this.dropdown.outerWidth(false), h = a + c <= s, p = this.dropdown.hasClass("select2-drop-above"), d, v, m; if (this.body().css("position") !== "static") { d = this.body().offset(); u -= d.top; a -= d.left } if (p) { v = true; if (!l && f) v = false } else { v = false; if (!f && l) v = true } if (!h) { a = t.left + r - c } if (v) { u = t.top - i; this.container.addClass("select2-drop-above"); this.dropdown.addClass("select2-drop-above") } else { this.container.removeClass("select2-drop-above"); this.dropdown.removeClass("select2-drop-above") } m = e.extend({ top: u, left: a, width: r }, k(this.opts.dropdownCss)); this.dropdown.css(m) }, shouldOpen: function () { var t; if (this.opened()) return false; t = e.Event("open"); this.opts.element.trigger(t); return !t.isDefaultPrevented() }, clearDropdownAlignmentPreference: function () { this.container.removeClass("select2-drop-above"); this.dropdown.removeClass("select2-drop-above") }, open: function () { if (!this.shouldOpen()) return false; window.setTimeout(this.bind(this.opening), 1); return true }, opening: function () { var t = this.containerId, n = this.containerSelector, r = "scroll." + t, i = "resize." + t; this.container.parents().each(function () { e(this).bind(r, function () { var t = e(n); if (t.length == 0) { e(this).unbind(r) } t.select2("close") }) }); window.setTimeout(function () { e(window).bind(i, function () { var t = e(n); if (t.length == 0) { e(window).unbind(i) } t.select2("close") }) }, 10); this.clearDropdownAlignmentPreference(); if (this.search.val() === " ") { this.search.val("") } this.container.addClass("select2-dropdown-open").addClass("select2-container-active"); this.updateResults(true); if (this.dropdown[0] !== this.body().children().last()[0]) { this.dropdown.detach().appendTo(this.body()) } this.dropdown.show(); this.positionDropdown(); this.dropdown.addClass("select2-drop-active"); this.ensureHighlightVisible(); this.focusSearch() }, close: function () { if (!this.opened()) return; var t = this; this.container.parents().each(function () { e(this).unbind("scroll." + t.containerId) }); e(window).unbind("resize." + this.containerId); this.clearDropdownAlignmentPreference(); this.dropdown.hide(); this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active"); this.results.empty(); this.clearSearch(); this.opts.element.trigger(e.Event("close")) }, clearSearch: function () { }, ensureHighlightVisible: function () { var t = this.results, n, r, i, s, o, u, a; r = this.highlight(); if (r < 0) return; if (r == 0) { t.scrollTop(0); return } n = t.find(".select2-result-selectable"); i = e(n[r]); s = i.offset().top + i.outerHeight(true); if (r === n.length - 1) { a = t.find("li.select2-more-results"); if (a.length > 0) { s = a.offset().top + a.outerHeight(true) } } o = t.offset().top + t.outerHeight(true); if (s > o) { t.scrollTop(t.scrollTop() + (s - o)) } u = i.offset().top - t.offset().top; if (u < 0 && i.css("display") != "none") { t.scrollTop(t.scrollTop() + u) } }, moveHighlight: function (t) { var n = this.results.find(".select2-result-selectable"), r = this.highlight(); while (r > -1 && r < n.length) { r += t; var i = e(n[r]); if (i.hasClass("select2-result-selectable") && !i.hasClass("select2-disabled")) { this.highlight(r); break } } }, highlight: function (t) { var n = this.results.find(".select2-result-selectable").not(".select2-disabled"); if (arguments.length === 0) { return l(n.filter(".select2-highlighted")[0], n.get()) } if (t >= n.length) t = n.length - 1; if (t < 0) t = 0; n.removeClass("select2-highlighted"); e(n[t]).addClass("select2-highlighted"); this.ensureHighlightVisible() }, countSelectableResults: function () { return this.results.find(".select2-result-selectable").not(".select2-disabled").length }, highlightUnderEvent: function (t) { var n = e(t.target).closest(".select2-result-selectable"); if (n.length > 0 && !n.is(".select2-highlighted")) { var r = this.results.find(".select2-result-selectable"); this.highlight(r.index(n)) } else if (n.length == 0) { this.results.find(".select2-highlighted").removeClass("select2-highlighted") } }, loadMoreIfNeeded: function () { var e = this.results, t = e.find("li.select2-more-results"), n, r = -1, i = this.resultsPage + 1, s = this, o = this.search.val(), u = this.context; if (t.length === 0) return; n = t.offset().top - e.offset().top - e.height(); if (n <= 0) { t.addClass("select2-active"); this.opts.query({ term: o, page: i, context: u, matcher: this.opts.matcher, callback: this.bind(function (n) { if (!s.opened()) return; s.opts.populateResults.call(this, e, n.results, { term: o, page: i, context: u }); if (n.more === true) { t.detach().appendTo(e).text(s.opts.formatLoadMore(i + 1)); window.setTimeout(function () { s.loadMoreIfNeeded() }, 10) } else { t.remove() } s.positionDropdown(); s.resultsPage = i }) }) } }, tokenize: function () { }, updateResults: function (n) { function f() { i.scrollTop(0); r.removeClass("select2-active"); u.positionDropdown() } function l(e) { i.html(u.opts.escapeMarkup(e)); f() } var r = this.search, i = this.results, s = this.opts, o, u = this, a; if (n !== true && (this.showSearchInput === false || !this.opened())) { return } r.addClass("select2-active"); if (s.maximumSelectionSize >= 1) { o = this.data(); if (e.isArray(o) && o.length >= s.maximumSelectionSize && C(s.formatSelectionTooBig, "formatSelectionTooBig")) { l("<li class='select2-selection-limit'>" + s.formatSelectionTooBig(s.maximumSelectionSize) + "</li>"); return } } if (r.val().length < s.minimumInputLength) { if (C(s.formatInputTooShort, "formatInputTooShort")) { l("<li class='select2-no-results'>" + s.formatInputTooShort(r.val(), s.minimumInputLength) + "</li>") } else { l("") } return } else if (s.formatSearching()) { l("<li class='select2-searching'>" + s.formatSearching() + "</li>") } a = this.tokenize(); if (a != t && a != null) { r.val(a) } this.resultsPage = 1; s.query({ term: r.val(), page: this.resultsPage, context: null, matcher: s.matcher, callback: this.bind(function (o) { var a; if (!this.opened()) return; this.context = o.context === t ? null : o.context; if (this.opts.createSearchChoice && r.val() !== "") { a = this.opts.createSearchChoice.call(null, r.val(), o.results); if (a !== t && a !== null && u.id(a) !== t && u.id(a) !== null) { if (e(o.results).filter(function () { return c(u.id(this), u.id(a)) }).length === 0) { o.results.unshift(a) } } } if (o.results.length === 0 && C(s.formatNoMatches, "formatNoMatches")) { l("<li class='select2-no-results'>" + s.formatNoMatches(r.val()) + "</li>"); return } i.empty(); u.opts.populateResults.call(this, i, o.results, { term: r.val(), page: this.resultsPage, context: null }); if (o.more === true && C(s.formatLoadMore, "formatLoadMore")) { i.append("<li class='select2-more-results'>" + u.opts.escapeMarkup(s.formatLoadMore(this.resultsPage)) + "</li>"); window.setTimeout(function () { u.loadMoreIfNeeded() }, 10) } this.postprocessResults(o, n); f() }) }) }, cancel: function () { this.close() }, blur: function () { this.close(); this.container.removeClass("select2-container-active"); this.dropdown.removeClass("select2-drop-active"); if (this.search[0] === document.activeElement) { this.search.blur() } this.clearSearch(); this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"); this.opts.element.triggerHandler("blur") }, focusSearch: function () { this.search.show(); this.search.focus(); window.setTimeout(this.bind(function () { this.search.show(); this.search.focus(); this.search.val(this.search.val()) }), 10) }, selectHighlighted: function () { var e = this.highlight(), t = this.results.find(".select2-highlighted").not(".select2-disabled"), n = t.closest(".select2-result-selectable").data("select2-data"); if (n) { t.addClass("select2-disabled"); this.highlight(e); this.onSelect(n) } }, getPlaceholder: function () { return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder }, initContainerWidth: function () { function n() { var n, r, i, s, o; if (this.opts.width === "off") { return null } else if (this.opts.width === "element") { return this.opts.element.outerWidth(false) === 0 ? "auto" : this.opts.element.outerWidth(false) + "px" } else if (this.opts.width === "copy" || this.opts.width === "resolve") { n = this.opts.element.attr("style"); if (n !== t) { r = n.split(";"); for (s = 0, o = r.length; s < o; s = s + 1) { i = r[s].replace(/\s/g, "").match(/width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/); if (i !== null && i.length >= 1) return i[1] } } if (this.opts.width === "resolve") { n = this.opts.element.css("width"); if (n.indexOf("%") > 0) return n; return this.opts.element.outerWidth(false) === 0 ? "auto" : this.opts.element.outerWidth(false) + "px" } return null } else if (e.isFunction(this.opts.width)) { return this.opts.width() } else { return this.opts.width } } var r = n.call(this); if (r !== null) { this.container.attr("style", "width: " + r) } } }); i = O(r, { createContainer: function () { var t = e("<div></div>", { "class": "select2-container" }).html(["    <a href='javascript:void(0)' onclick='return false;' class='select2-choice'>", "   <span></span><abbr class='select2-search-choice-close' style='display:none;'></abbr>", "   <div><b></b></div>", "</a>", "    <div class='select2-drop select2-offscreen'>", "   <div class='select2-search'>", "       <input type='text' autocomplete='off' class='select2-input'/>", "   </div>", "   <ul class='select2-results'>", "   </ul>", "</div>"].join("")); return t }, opening: function () { this.search.show(); this.parent.opening.apply(this, arguments); this.dropdown.removeClass("select2-offscreen") }, close: function () { if (!this.opened()) return; this.parent.close.apply(this, arguments); this.dropdown.removeAttr("style").addClass("select2-offscreen").insertAfter(this.selection).show() }, focus: function () { this.close(); this.selection.focus() }, isFocused: function () { return this.selection[0] === document.activeElement }, cancel: function () { this.parent.cancel.apply(this, arguments); this.selection.focus() }, initContainer: function () { var e, t = this.container, r = this.dropdown, i = false; this.selection = e = t.find(".select2-choice"); this.search.bind("keydown", this.bind(function (e) { if (!this.enabled) return; if (e.which === n.PAGE_UP || e.which === n.PAGE_DOWN) { b(e); return } if (this.opened()) { switch (e.which) { case n.UP: case n.DOWN: this.moveHighlight(e.which === n.UP ? -1 : 1); b(e); return; case n.TAB: case n.ENTER: this.selectHighlighted(); b(e); return; case n.ESC: this.cancel(e); b(e); return } } else { if (e.which === n.TAB || n.isControl(e) || n.isFunctionKey(e) || e.which === n.ESC) { return } if (this.opts.openOnEnter === false && e.which === n.ENTER) { return } this.open(); if (e.which === n.ENTER) { return } } })); this.search.bind("focus", this.bind(function () { this.selection.attr("tabIndex", "-1") })); this.search.bind("blur", this.bind(function () { if (!this.opened()) this.container.removeClass("select2-container-active"); window.setTimeout(this.bind(function () { var e = this.opts.element.attr("tabIndex"); if (e) { this.selection.attr("tabIndex", e) } else { this.selection.removeAttr("tabIndex") } }), 10) })); e.delegate("abbr", "mousedown", this.bind(function (e) { if (!this.enabled) return; this.clear(); w(e); this.close(); this.triggerChange(); this.selection.focus() })); e.bind("mousedown", this.bind(function (e) { i = true; if (this.opened()) { this.close(); this.selection.focus() } else if (this.enabled) { this.open() } i = false })); r.bind("mousedown", this.bind(function () { this.search.focus() })); e.bind("focus", this.bind(function () { this.container.addClass("select2-container-active"); this.search.attr("tabIndex", "-1") })); e.bind("blur", this.bind(function () { if (!this.opened()) { this.container.removeClass("select2-container-active") } window.setTimeout(this.bind(function () { this.search.attr("tabIndex", this.opts.element.attr("tabIndex")) }), 10) })); e.bind("keydown", this.bind(function (e) { if (!this.enabled) return; if (e.which == n.DOWN || e.which == n.UP || e.which == n.ENTER && this.opts.openOnEnter) { this.open(); b(e); return } if (e.which == n.DELETE || e.which == n.BACKSPACE) { if (this.opts.allowClear) { this.clear() } b(e); return } })); e.bind("keypress", this.bind(function (e) { var t = String.fromCharCode(e.which); this.search.val(t); this.open() })); this.setPlaceholder(); this.search.bind("focus", this.bind(function () { this.container.addClass("select2-container-active") })) }, clear: function () { this.opts.element.val(""); this.selection.find("span").empty(); this.selection.removeData("select2-data"); this.setPlaceholder() }, initSelection: function () { var e; if (this.opts.element.val() === "" && this.opts.element.text() === "") { this.close(); this.setPlaceholder() } else { var n = this; this.opts.initSelection.call(null, this.opts.element, function (e) { if (e !== t && e !== null) { n.updateSelection(e); n.close(); n.setPlaceholder() } }) } }, prepareOpts: function () { var t = this.parent.prepareOpts.apply(this, arguments); if (t.element.get(0).tagName.toLowerCase() === "select") { t.initSelection = function (t, n) { var r = t.find(":selected"); if (e.isFunction(n)) n({ id: r.attr("value"), text: r.text(), element: r }) } } return t }, setPlaceholder: function () { var e = this.getPlaceholder(); if (this.opts.element.val() === "" && e !== t) { if (this.select && this.select.find("option:first").text() !== "") return; this.selection.find("span").html(this.opts.escapeMarkup(e)); this.selection.addClass("select2-default"); this.selection.find("abbr").hide() } }, postprocessResults: function (t, n) { var r = 0, i = this, s = true; this.results.find(".select2-result-selectable").each2(function (e, t) { if (c(i.id(t.data("select2-data")), i.opts.element.val())) { r = e; return false } }); this.highlight(r); if (n === true) { s = this.showSearchInput = L(t.results) >= this.opts.minimumResultsForSearch; this.dropdown.find(".select2-search")[s ? "removeClass" : "addClass"]("select2-search-hidden"); e(this.dropdown, this.container)[s ? "addClass" : "removeClass"]("select2-with-searchbox") } }, onSelect: function (e) { var t = this.opts.element.val(); this.opts.element.val(this.id(e)); this.updateSelection(e); this.close(); this.selection.focus(); if (!c(t, this.id(e))) { this.triggerChange() } }, updateSelection: function (e) { var n = this.selection.find("span"), r; this.selection.data("select2-data", e); n.empty(); r = this.opts.formatSelection(e, n); if (r !== t) { n.append(this.opts.escapeMarkup(r)) } this.selection.removeClass("select2-default"); if (this.opts.allowClear && this.getPlaceholder() !== t) { this.selection.find("abbr").show() } }, val: function () { var e, n = null, r = this; if (arguments.length === 0) { return this.opts.element.val() } e = arguments[0]; if (this.select) { this.select.val(e).find(":selected").each2(function (e, t) { n = { id: t.attr("value"), text: t.text() }; return false }); this.updateSelection(n); this.setPlaceholder(); this.triggerChange() } else { if (this.opts.initSelection === t) { throw new Error("cannot call val() if initSelection() is not defined") } if (!e) { this.clear(); this.triggerChange(); return } this.opts.element.val(e); this.opts.initSelection(this.opts.element, function (e) { r.opts.element.val(!e ? "" : r.id(e)); r.updateSelection(e); r.setPlaceholder(); r.triggerChange() }) } }, clearSearch: function () { this.search.val("") }, data: function (e) { var n; if (arguments.length === 0) { n = this.selection.data("select2-data"); if (n == t) n = null; return n } else { if (!e || e === "") { this.clear() } else { this.opts.element.val(!e ? "" : this.id(e)); this.updateSelection(e) } } } }); s = O(r, { createContainer: function () { var t = e("<div></div>", { "class": "select2-container select2-container-multi" }).html(["    <ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <input type='text' autocomplete='off' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi' style='display:none;'>", "   <ul class='select2-results'>", "   </ul>", "</div>"].join("")); return t }, prepareOpts: function () { var t = this.parent.prepareOpts.apply(this, arguments); if (t.element.get(0).tagName.toLowerCase() === "select") { t.initSelection = function (t, n) { var r = []; t.find(":selected").each2(function (e, t) { r.push({ id: t.attr("value"), text: t.text(), element: t }) }); if (e.isFunction(n)) n(r) } } return t }, initContainer: function () { var t = ".select2-choices", r; this.searchContainer = this.container.find(".select2-search-field"); this.selection = r = this.container.find(t); this.search.bind("keydown", this.bind(function (e) { if (!this.enabled) return; if (e.which === n.BACKSPACE && this.search.val() === "") { this.close(); var t, i = r.find(".select2-search-choice-focus"); if (i.length > 0) { this.unselect(i.first()); this.search.width(10); b(e); return } t = r.find(".select2-search-choice:not(.select2-locked)"); if (t.length > 0) { t.last().addClass("select2-search-choice-focus") } } else { r.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus") } if (this.opened()) { switch (e.which) { case n.UP: case n.DOWN: this.moveHighlight(e.which === n.UP ? -1 : 1); b(e); return; case n.ENTER: case n.TAB: this.selectHighlighted(); b(e); return; case n.ESC: this.cancel(e); b(e); return } } if (e.which === n.TAB || n.isControl(e) || n.isFunctionKey(e) || e.which === n.BACKSPACE || e.which === n.ESC) { return } if (this.opts.openOnEnter === false && e.which === n.ENTER) { return } this.open(); if (e.which === n.PAGE_UP || e.which === n.PAGE_DOWN) { b(e) } })); this.search.bind("keyup", this.bind(this.resizeSearch)); this.search.bind("blur", this.bind(function (e) { this.container.removeClass("select2-container-active"); this.search.removeClass("select2-focused"); this.clearSearch(); e.stopImmediatePropagation() })); this.container.delegate(t, "mousedown", this.bind(function (t) { if (!this.enabled) return; if (e(t.target).closest(".select2-search-choice").length > 0) { return } this.clearPlaceholder(); this.open(); this.focusSearch(); t.preventDefault() })); this.container.delegate(t, "focus", this.bind(function () { if (!this.enabled) return; this.container.addClass("select2-container-active"); this.dropdown.addClass("select2-drop-active"); this.clearPlaceholder() })); this.clearSearch() }, enable: function () { if (this.enabled) return; this.parent.enable.apply(this, arguments); this.search.removeAttr("disabled") }, disable: function () { if (!this.enabled) return; this.parent.disable.apply(this, arguments); this.search.attr("disabled", true) }, initSelection: function () { var e; if (this.opts.element.val() === "" && this.opts.element.text() === "") { this.updateSelection([]); this.close(); this.clearSearch() } if (this.select || this.opts.element.val() !== "") { var n = this; this.opts.initSelection.call(null, this.opts.element, function (e) { if (e !== t && e !== null) { n.updateSelection(e); n.close(); n.clearSearch() } }) } }, clearSearch: function () { var e = this.getPlaceholder(); if (e !== t && this.getVal().length === 0 && this.search.hasClass("select2-focused") === false) { this.search.val(e).addClass("select2-default"); this.resizeSearch() } else { this.search.val(" ").width(10) } }, clearPlaceholder: function () { if (this.search.hasClass("select2-default")) { this.search.val("").removeClass("select2-default") } else { if (this.search.val() === " ") this.search.val("") } }, opening: function () { this.parent.opening.apply(this, arguments); this.clearPlaceholder(); this.resizeSearch(); this.focusSearch() }, close: function () { if (!this.opened()) return; this.parent.close.apply(this, arguments) }, focus: function () { this.close(); this.search.focus() }, isFocused: function () { return this.search.hasClass("select2-focused") }, updateSelection: function (t) { var n = [], r = [], i = this; e(t).each(function () { if (l(i.id(this), n) < 0) { n.push(i.id(this)); r.push(this) } }); t = r; this.selection.find(".select2-search-choice").remove(); e(t).each(function () { i.addSelectedChoice(this) }); i.postprocessResults() }, tokenize: function () { var e = this.search.val(); e = this.opts.tokenizer(e, this.data(), this.bind(this.onSelect), this.opts); if (e != null && e != t) { this.search.val(e); if (e.length > 0) { this.open() } } }, onSelect: function (e) { this.addSelectedChoice(e); if (this.select || !this.opts.closeOnSelect) this.postprocessResults(); if (this.opts.closeOnSelect) { this.close(); this.search.width(10) } else { if (this.countSelectableResults() > 0) { this.search.width(10); this.resizeSearch(); this.positionDropdown() } else { this.close() } } this.triggerChange({ added: e }); this.focusSearch() }, cancel: function () { this.close(); this.focusSearch() }, addSelectedChoice: function (n) { var r = !n.locked, i = e("<li class='select2-search-choice'>" + "    <div></div>" + "    <a href='#' onclick='return false;' class='select2-search-choice-close' tabindex='-1'></a>" + "</li>"), s = e("<li class='select2-search-choice select2-locked'>" + "<div></div>" + "</li>"); var o = r ? i : s, u = this.id(n), a = this.getVal(), f; f = this.opts.formatSelection(n, o.find("div")); if (f != t) { o.find("div").replaceWith("<div>" + this.opts.escapeMarkup(f) + "</div>") } if (r) { o.find(".select2-search-choice-close").bind("mousedown", b).bind("click dblclick", this.bind(function (t) { if (!this.enabled) return; e(t.target).closest(".select2-search-choice").fadeOut("fast", this.bind(function () { this.unselect(e(t.target)); this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"); this.close(); this.focusSearch() })).dequeue(); b(t) })).bind("focus", this.bind(function () { if (!this.enabled) return; this.container.addClass("select2-container-active"); this.dropdown.addClass("select2-drop-active") })) } o.data("select2-data", n); o.insertBefore(this.searchContainer); a.push(u); this.setVal(a) }, unselect: function (e) { var t = this.getVal(), n, r; e = e.closest(".select2-search-choice"); if (e.length === 0) { throw "Invalid argument: " + e + ". Must be .select2-search-choice" } n = e.data("select2-data"); r = l(this.id(n), t); if (r >= 0) { t.splice(r, 1); this.setVal(t); if (this.select) this.postprocessResults() } e.remove(); this.triggerChange({ removed: n }) }, postprocessResults: function () { var e = this.getVal(), t = this.results.find(".select2-result-selectable"), n = this.results.find(".select2-result-with-children"), r = this; t.each2(function (t, n) { var i = r.id(n.data("select2-data")); if (l(i, e) >= 0) { n.addClass("select2-disabled").removeClass("select2-result-selectable") } else { n.removeClass("select2-disabled").addClass("select2-result-selectable") } }); n.each2(function (e, t) { if (!t.is(".select2-result-selectable") && t.find(".select2-result-selectable").length == 0) { t.addClass("select2-disabled") } else { t.removeClass("select2-disabled") } }); if (this.highlight() == -1) { t.each2(function (e, t) { if (!t.hasClass("select2-disabled") && t.hasClass("select2-result-selectable")) { r.highlight(0); return false } }) } }, resizeSearch: function () { var e, t, n, r, i, s = p(this.search); e = E(this.search) + 10; t = this.search.offset().left; n = this.selection.width(); r = this.selection.offset().left; i = n - (t - r) - s; if (i < e) { i = n - s } if (i < 40) { i = n - s } if (i <= 0) { i = e } this.search.width(i) }, getVal: function () { var e; if (this.select) { e = this.select.val(); return e === null ? [] : e } else { e = this.opts.element.val(); return h(e, this.opts.separator) } }, setVal: function (t) { var n; if (this.select) { this.select.val(t) } else { n = []; e(t).each(function () { if (l(this, n) < 0) n.push(this) }); this.opts.element.val(n.length === 0 ? "" : n.join(this.opts.separator)) } }, val: function () { var n, r = [], i = this; if (arguments.length === 0) { return this.getVal() } n = arguments[0]; if (!n) { this.opts.element.val(""); this.updateSelection([]); this.clearSearch(); this.triggerChange(); return } this.setVal(n); if (this.select) { this.select.find(":selected").each(function () { r.push({ id: e(this).attr("value"), text: e(this).text() }) }); this.updateSelection(r); this.triggerChange() } else { if (this.opts.initSelection === t) { throw new Error("val() cannot be called if initSelection() is not defined") } this.opts.initSelection(this.opts.element, function (t) { var n = e(t).map(i.id); i.setVal(n); i.updateSelection(t); i.clearSearch(); i.triggerChange() }) } this.clearSearch() }, onSortStart: function () { if (this.select) { throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.") } this.search.width(0); this.searchContainer.hide() }, onSortEnd: function () { var t = [], n = this; this.searchContainer.show(); this.searchContainer.appendTo(this.searchContainer.parent()); this.resizeSearch(); this.selection.find(".select2-search-choice").each(function () { t.push(n.opts.id(e(this).data("select2-data"))) }); this.setVal(t); this.triggerChange() }, data: function (t) { var n = this, r; if (arguments.length === 0) { return this.selection.find(".select2-search-choice").map(function () { return e(this).data("select2-data") }).get() } else { if (!t) { t = [] } r = e.map(t, function (e) { return n.opts.id(e) }); this.setVal(r); this.updateSelection(t); this.clearSearch() } } }); e.fn.select2 = function () { var n = Array.prototype.slice.call(arguments, 0), r, o, u, a, f = ["val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "onSortStart", "onSortEnd", "enable", "disable", "positionDropdown", "data"]; this.each(function () { if (n.length === 0 || typeof n[0] === "object") { r = n.length === 0 ? {} : e.extend({}, n[0]); r.element = e(this); if (r.element.get(0).tagName.toLowerCase() === "select") { a = r.element.attr("multiple") } else { a = r.multiple || false; if ("tags" in r) { r.multiple = a = true } } o = a ? new s : new i; o.init(r) } else if (typeof n[0] === "string") { if (l(n[0], f) < 0) { throw "Unknown method: " + n[0] } u = t; o = e(this).data("select2"); if (o === t) return; if (n[0] === "container") { u = o.container } else { u = o[n[0]].apply(o, n.slice(1)) } if (u !== t) { return false } } else { throw "Invalid arguments to select2 plugin: " + n } }); return u === t ? this : u }; e.fn.select2.defaults = { width: "copy", closeOnSelect: true, openOnEnter: true, containerCss: {}, dropdownCss: {}, containerCssClass: "", dropdownCssClass: "", formatResult: function (e, t, n) { var r = []; S(e.text, n.term, r); return r.join("") }, formatSelection: function (e, n) { return e ? e.text : t }, formatResultCssClass: function (e) { return t }, formatNoMatches: function () { return "No matches found" }, formatInputTooShort: function (e, t) { var n = t - e.length; return "Please enter " + n + " more character" + (n == 1 ? "" : "s") }, formatSelectionTooBig: function (e) { return "You can only select " + e + " item" + (e == 1 ? "" : "s") }, formatLoadMore: function (e) { return "Loading more results..." }, formatSearching: function () { return "Searching..." }, minimumResultsForSearch: 0, minimumInputLength: 0, maximumSelectionSize: 0, id: function (e) { return e.id }, matcher: function (e, t) { return t.toUpperCase().indexOf(e.toUpperCase()) >= 0 }, separator: ",", tokenSeparators: [], tokenizer: A, escapeMarkup: function (e) { if (e && typeof e === "string") { return e.replace(/&/g, "&") } return e }, blurOnChange: false }; window.Select2 = { query: { ajax: x, local: T, tags: N }, util: { debounce: m, markMatch: S }, "class": { "abstract": r, single: i, multi: s}} })(jQuery)